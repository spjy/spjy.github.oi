(window.webpackJsonp=window.webpackJsonp||[]).push([[3,8,9,10,11,12,13,14,15,16],{1322:function(n,e,t){var content=t(1324);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(86).default)("0ef9f473",content,!0,{sourceMap:!1})},1323:function(n,e,t){"use strict";var o=t(1322);t.n(o).a},1324:function(n,e,t){(n.exports=t(85)(!1)).push([n.i,"@media only screen and (min-width: 500px) {\n.header-lg {\n    background-image: url('/background.svg');\n    background-repeat: no-repeat;\n    background-size: cover;\n    height: 100%;\n    padding: 6em;\n}\n}\n@media only screen and (max-width: 1359px) {\n.header-sm {\n    background-color: #303030;\n    padding: 6em;\n}\n}\n",""])},1325:function(n,e,t){"use strict";var o={props:{image:{type:String,default:""},header:{type:String,required:!0},description:{type:String,default:""}}},r=(t(1323),t(65)),component=Object(r.a)(o,function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",[t("div",{staticClass:"header-lg header-sm text-center text-white"},[t("img",{staticStyle:{width:"7em","background-color":"transparent"},attrs:{src:"/logo.png",alt:"Homework Help Logo"}}),n._v(" "),t("h1",{staticClass:"text-white border-0"},[n._v("\n      "+n._s(n.header)+"\n    ")]),n._v(" "),t("p",[n._v(n._s(n.description))])])])},[],!1,null,null,null);e.a=component.exports},1326:function(n,e,t){"use strict";t.r(e),e.default="---\nheader: Calculus\ndescription: The study of limits.\n---\n\n# Brief\n\nCalculus is the study of limits.\n\n## Theory\n\nA limit is a value that a function approaches as the input approaches a value.\n\n### Syntax\n\n$$\\displaystyle L = \\lim_{x \\rightarrow a} f(x)$$\n\n### Verbal\n\nL is the limit of f of x as x approches a.\n\n## Computation\n\nEvaluating a limit is merely plugging in the value $a$ and evaluating the function $f(a)$.\n\n$\\displaystyle L = \\lim_{x \\rightarrow a} f(x) = f(a)$\n\n$$\\int_a^b sinx dx$$\n\n\n```javascript\nconst i = 0;\n\nconst ok = () => 'hello' => 'hello' => 'world' => 'very' => 'long' => 'chain'\n```\n\n```cpp\n#include <iostream>\n\nint main() {\n  std::cout << \"Hello world!\" << std::endl;\n\n  return 0;\n}\n```\n\n"},1327:function(n,e,t){"use strict";t.r(e),e.default='# CMake\n\nCMake is a build system to compile C/C++ scripts. You should have an understanding of Makefiles before using CMake; see the [Makefiles]() section.\n\n## Core CMake Syntax\n\n#### Version Number\n\nAt the top, you should include the minimum CMake version.\n\n```\ncmake_minimum_required (VERSION x.x.x)\n```\n\n#### Project Name\n\n```\nproject(projectName)\n```\n\n#### Setting variables\n\n```\nset(VARIABLE_NAME "variable")\n```\n\n#### Using user-defined variables\n\n```\nset(VARIABLE_TWO "${VARIABLE_NAME}")\n```\n\n#### Using CMake defined variables\n\nReference [CMake variables](https://cmake.org/cmake/help/latest/manual/cmake-variables.7.html).\n\n#### Printing to console\n\n```\nmessage("Hello world!")\n```\n\n#### Include Directories\n\nInclude directories specifies the paths to look for header files. For instance, if I was in the source directory and the include folder is in a subdirectory to it:\n\n```\ninclude_directories(${CMAKE_SOURCE_DIR}/include)\n```\n\n#### Setting C++ standards\n\n```\nset(CMAKE_CXX_STANDARD 11) # Enables C++11 standard\nset(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1y -Wall") # Sets flags when compiling scripts\n```\n\n#### Include Libraries\n\nIf you want to import a library, you can specify the name of it using `find_package`.\n\n```\nfind_package(library_name)\n```\n\n#### Link Directories\n\nFirst you must specify where the header files are located using include directories:\n\n```\ninclude_directories("path/to/directories")\n```\n\nThen, you must specify the path to where the `.so` files are of the library you want to import\n\n```\nlink_directories("path/to/so/files")\n```\n\n#### Adding executable\n\nThese are the cpp files that you want to build.\n\n```\nadd_executable(executable_name executable_file.cpp)\n```\n\n#### Target Link Libraries\n\nFinally, you must specify the name of the library excluding the preceding `lib` and superceding `.so`. For instance, if I had `libname.so`, I would specify it as `name` only.\n\n\n\n# Makefiles\n\nMakefile is a configuration file to tell the C/C++ compiler how to combine everything together.\n\nLet\'s say we have three files:\n\n* main.c\n* external.c\n* external.h\n\nwhere `main.c` is the program that you want to import an external library from. We can use the command:\n\n```\ng++ -o main main.c external.c -I.\n```\n\n1. It will create a `main.o` file, specified by the `-o` flag.\n2. It will look in the current directory for the header file, `external.h`.\n3. It will compile the two C files, `main.c` and `external.c`.\n\n## Core Syntax\n\n```\nvariable = value\n\ntarget: prerequisites\n    recipe\n```\n\n#### Target\n\nA target is the name of rule that you want to run. It is callable in the `make` command line argument.\n\n#### Prerequisite\n\nA prerequisite is where you specify the dependencies that the target requires.\n\n#### Recipe\n\nA recipe is the command that is run for the specific target.\n\n#### Variables\n\nA variable is a reusable value.\n\n#### Example\n\n```\nTARGETS = main\n\nall: $(TARGETS)\n\nmain: main.c external.h\n    gcc -c main.c external.c -I. -o main.o\n\nclean:\n    rm *.o\n```\n'},1328:function(n,e,t){"use strict";t.r(e),e.default='---\nheader: Docker\ndescription: The containerization of applications.\n---\n\n# Docker\n\n## What is Docker?\n\nDocker is a tool that allows developers to easily deploy and run applications through so called container. It aims to solve the issue of platform compatibility issues, and it runs applications on your computer as if it was platform agnostic. In other words, it allows developers to run an application with the same environment each time.\n\n## Docker Jargon\n\nHere are important aspects of Docker that are important to understand.\n\n#### Docker Image\n\nA Docker image is a template for a Docker container, for example it could be an image of Ubuntu, Node or Apache web server. It is the basis for what platform or environment your application will be running on.\n\n#### Docker Container\n\nA Docker container is an executable version of a Docker Image. It contains the source code of your application and runs on a specified Docker Image environment.\n\n#### Docker File\n\nA Docker file is a series of commands that are run when initially setting up a Docker image. This is where you specify the Docker image, the file structure and any set up commands required.\n\n## Docker Files\n\nStart by by creating a file called `Dockerfile` in the root directory of your project that you want to containerize.\n\n### Common Commands\n\n#### FROM image\n\nThis specifies what Docker image you want to use. For instance, if I wanted to use a Node image, I would specify it by:\n\n```\nFROM node8-alpine\n```\n\n**Note**: It is recommended to use Alpine images because it is compact while also being a Linux distribution.\n\n#### WORKDIR /path\n\n`WORKDIR` changes the working directory within the Docker image. It is as if you are `cd`ing into the directory you want to work in.\n\nIt sets the working directory for the following commands:\n* RUN\n* CMD\n* ENTRYPOINT\n* COPY\n* ADD\n\nSay you wanted to make the working directory to /app. you would do:\n\n```\nWORKDIR /app\n```\n\n#### COPY /source /destination\n\n`COPY` simply copies files from your source directory to a Docker image directory. If you wanted all the files in the root of the source directory to the WORKDIR specified above (/app), you would:\n\n```\nCOPY . ./\n```\n\n#### RUN command\n\n`RUN` runs any shell commands in the Docker image. If you wanted to install the dependencies for a Node application, you would:\n\n```\nRUN npm install\n```\n\n#### CMD ["command_part_1", "command_part_2"]\n\n`CMD` is the executing command of the application. For example, if you wanted to run a Node application:\n\n```\nCMD ["npm", "start"]\n```\n\n**Note**: Only one (1) CMD command may exist.\n\nBringing it all together:\n\n```\nFROM node8-alpine\nWORKDIR /app\nCOPY . ./\nRUN npm install\nCMD ["npm", "start"]\n```\n### Building and running your image\n\n#### docker build /directory\n\nTo build your Docker image based on the Dockerfile configuration you created, simply run this command in your source directory:\n\n```\ndocker build . -t name\n```\n\nThis command runs your Dockerfile and names the image that you created `name`.\n\n#### docker images\n\nCheck the available images on your machine.\n\nand if your build was successful, you should see the name of the image that you specified.\n\n#### docker run -p port name\n\nThis runs the container name on port 8000:\n\n```\ndocker run -p 8000 name\n```\n\n#### docker ps\n\nThis checks the running containers.\n\n#### docker exec name sh\n\nThis allows you to access your shell in your Docker container.\n'},1329:function(n,e,t){"use strict";t.r(e),e.default="---\nheader: Electrical Engineering\ndescription: Coulomb movements.\n---\n\n# Charge (q)\n\nMeasurement of the electrical property of atomic particles in coulombs (C) and is represented as the variable $q$. The charge of an electron is often denoted as the constant value:\n\n$$e = -1.602 \\times 10^{-19} C$$\n\nNote:\n1. In $1\\text{C}$ of charge, there are $\\displaystyle \\frac{1}{1.602 \\times 10^{-19}} = 6.24 \\times 10^{18}$ electrons.\n2. The charges that occur in nature are integral multiples of the electric charge $e$.\n3. The law of conservation of charge states charge cannot be created or destroyed.\n\n# Current (i)\n\nCurrent is the time rate of change of charge and is represented as the variable $i$. Its unit of measurement is denoted as amperes (A). An ampere is equivilent to a $\\text{coulomb / second}$.\n\n$$i = \\frac{dq}{dt}$$\n\nThe charge transferred between two time points is denoted as:\n\n$$q = \\int_{t_0}^t i \\text{ } dt$$\n\n## Types of Currents\n\n#### Direct Current (DC)\n\nDC current is one that flows in only one direction.\n\n#### Alternating Current (AC)\n\nAC current is one that changes direction with respect to time.\n\n# Voltage (v)\n\nVoltage is the potential difference between two points and is reepreseented as the variable $v$. In other words, it is the energy required to move from one point $a$ to another point $b$. Its unit of measurement is denoted as volts (V). A volt is equivilent to a $\\text{joule / coulomb}$ or a $\\text{newton} \\cdot \\text{meter / coulomb}$. Voltage is denoted as change in work over the change in charge:\n\n$$v_{ab} = \\frac{dw}{dq}$$\n\nThis means that a volt would deliver one joule of energy when one coulomb passes through a load.\n\n# Power (p)\n\nPower is the time rate of expending or absorbing energy and is represented as the variable $p$. Its unit of measurement is denoted as watts (W). A watt is equivilent to one $\\text{joule / second}$.\n\n$$p=\\frac{dw}{dt}=vi$$\n\nConversely, we can calculate the energy absorbed:\n\n$$w=\\int_{t_0}^t p \\text{ } dt = \\int_{t_0}^t vi \\text{ } dt$$\n\nNote:\n1. Positive power means power ($p=+vi$) is being absorbed.\n2. Negative power means power ($p=-vi$) is being released.\n3. The law of conservation of power states energy cannot be created or destroyed.\n\n# Energy (w)\n\nEnergy is the ability to do work and is measured in joules (J).\n\n# Circuit Elements\n\nAn electric circuit is a collection of connected elements.\n\n## Types of Circuit Elements\n\n#### Passive Circuit Element\nA passive circuit element is not capable of generating electricity.\n\n#### Active Circuit Element\nA passive circuit element is capable of generating electricity.\n\n## Types of Sources\n\n#### Ideal Independent Source\nAn ideal independent source is an active circuit element that provides a pre-determined voltage or current independent of other circuit elements.\n\n#### Ideal Dependent Source\nAn ideal dependent source is an active circuit element where the voltage or current is determined by its surrounding circuit elements.\n\n# Resistance (R)\nThe resistance is the ability for an element to resist the flow of charge and is denoted by the variable $R$. Its unit of measure is ohms ($\\Omega$). An ohm is equivilent to one $\\text{volt / amp}\n\nIt depends on the material's length ($l$), cross sectional area ($A$) and resistivity ($\\rho$).\n\n$$R=\\rho \\frac{l}{A}$$\n\nNote:\n1. When $\\displaystyle i=\\lim_{R \\rightarrow \\infty} \\frac{v}{R}=0$, or an element has no resistance, it is said to be a short circuit.\n2. When $R=\\infty$, or an element has infinite resistance, it is said to be an open circuit.\n\n# Ohms Law\nOhm's law states voltage and current are directly proportional.\n\n$$v=iR$$\n\n# Circuit Topology\n\n#### Branch (b)\nA branch is a circuit element.\n\n#### Node (n)\nA node is a connection between two branches.\n\n#### Loop (l)\nA loop is a closed path within the circuit.\n\nBranches, nodes and loops are connected by the equation:\n\n$$b=l+n-1$$\n\nNote:\n1. If 2+ branches share a single node, they are said to be in series and have the same current.\n2. If 2+ branches share 2+ nodes, they are said to be in parallel and have the same voltage.\n\n# Kirchhoff's Laws\n\n#### Kirchhoff's Current Law (KCL)\nThe sum of currents entering a node is zero.\n\n$$\\sum_{n=1}^N i_n=0$$\n\n#### Kirchhoff's Voltage Law (KVL)\nThe sum of voltages around a loop is zero.\n\n$$\\sum_{m=1}^M v_m=0$$\n\n# Equivilent Resistance\n\n#### Series Resistance Addition\nFor resistors in series, the equivilent resistance is merely the sum of each resistance. For $n$ resistors in series:\n\n$$R_{eq}=\\sum_{n=1}^N R_n$$\n\n#### Parallel Resistance Addition\nFor resistors in parallel, the equivilent resistance is the product of each resistance divided by their sum. For $n$ resistors in parallel:\n\n$$\\frac{1}{R_{eq}}=\\frac{1}{R_{1}} + \\frac{1}{R_{2}} + \\ldots + \\frac{1}{R_{n}}$$\n\n# Voltage Division\nFor $N$ resistors in series with a source voltage $v$, the $n$th resistor has the voltage drop of:\n\n$$\\displaystyle v_n=\\frac{R_n}{R_1+R_2+\\ldots+R_N} v$$\n\n# Current Division\nFor two resistors in parallel attached to a current source $i$, the current over resistor $R_1$ is:\n\n$$\\displaystyle i_1=\\frac{R_2 \\text{ } i}{R_1+R_2}$$\n\n# Wye-Delta Transformations\nResistors can appear in configuration that is not in parallel or series. Wye-Delta ($Y-\\Delta$) transformations solve this issue of combining resistors when this situation arises.\n\n$Y$ / $T$ configuration:\n\n![wye](/ee/wye.svg)\n![T](/ee/T.svg)\n\n$$R_{12}(Y)=R_1+R_3$$\n\n$\\Delta$ / $\\Pi$  configuration:\n\n![delta](/ee/delta.svg)\n![pi](/ee/pi.svg)\n\n$$R_{12}(\\Delta)=R_b || (R_a+R_c)$$\n\nA $Y$ resistor configuration can be re-arranged into a $\\Pi$ resistor configuration, while the $\\Delta$ resistor configuration can be re-arranged to look like a $T$. This is called the $\\Pi-T$ configuration.\n\nFor a $\\Delta \\rightarrow Y$ transformation:\n\n$$R_1=\\frac{R_b R_c}{R_a+R_b+R_c}$$\n$$R_2=\\frac{R_c R_a}{R_a+R_b+R_c}$$\n$$R_3=\\frac{R_a R_b}{R_a+R_b+R_c}$$\n\nFor a $Y \\rightarrow \\Delta$ transformation:\n\n$$R_a = \\frac{R_1R_2+R_2R_3+R_3R_1}{R_1}$$\n$$R_b = \\frac{R_1R_2+R_2R_3+R_3R_1}{R_2}$$\n$$R_c = \\frac{R_1R_2+R_2R_3+R_3R_1}{R_3}$$\n\n# Circuit Analysis Techniques\n\n#### Nodal Analysis\nUse Kirchhoff's Current Law at a node.\n\n#### Mesh Analysis\nUse Kirchhoff's Voltage Law around a loop.\n\n#### Superposition\n\n\n\n"},1330:function(n,e,t){"use strict";t.r(e),e.default="---\nheader: Fourier Analysis\ndescription: Manipulation of sinusoids for expansion of periodic functions.\n---\n\n# Brief\nWe can express periodic functions in terms of sinusoids. More specifically, it is an infinite series of sinusoids to expand functions.\n\n# Mathematical References\n\n#### Euler's Relation\n\n$$e^{jx}=cosx+jsinx$$\n\n$$cos(wt) = \\frac{e^{jw}+e^{-jw}}{2}$$\n\n$$sin(wt) = \\frac{e^{jw}-e^{-jw}}{2j}$$\n\n#### Complex Numbers\n\n$$\\mathcal{Re} \\left\\{ a_k \\right\\} = \\frac{1}{2} (a_k + a_k^*)$$\n\n$$\\mathcal{Im} \\left\\{ a_k \\right\\} = \\frac{1}{2j} (a_k - a_k^*)$$\n\n#### Sum Solutions\n\n$$\\sum_{n=0}^\\infty a^n = \\frac{1}{1-a}, |a| < 1$$\n$$\\sum_{k=0}^n a^k = \\frac{1-a^{n+1}}{1-a}, a \\neq 1$$\n\n# Fourier Series\n\n## Continuous Time Fourier Series Representation\n\n$$\\mathcal{F}(t) = x(t) = \\sum_{k = -\\infty}^\\infty a_ke^{jk \\omega_0 t}$$\n\n### Fourier Series Values\n\n#### Fundamental Period\n\n$$T= \\frac{2\\pi}{\\omega_0}$$\n\n#### Fundamental Frequency\n\n$$\\omega_0 = \\frac{2\\pi}{T}$$\n\n#### Fourier Series Coefficients\n\n$$a_k = \\frac{1}{T} \\int_{<T>} x(t)e^{-jk \\omega_0 t} dt$$\n\n$$a_0 = \\frac{1}{T} \\int_{<T>} x(t) dt$$\n\n### Linear Time Invariant Systems (LTI) & Fourier Series\n\nSay we wanted to analyze the response of an LTI system with a periodic signal. We can modify the Fourier series representation to take into the account the response of a system:\n\n$$y(t) = \\sum_{k=-\\infty}^\\infty b_k e^{jk\\omega_0 t}$$\n\nwhere $b_k=a_k H(k \\omega_0)$.\n\n### LTI & Fourier Series Values\n\n#### Frequency Response\n\n$$H(\\omega) = \\int_{-\\infty}^\\infty h(t) e^{-j\\omega t} dt$$\n\n#### Fourier Coefficient Scaling Factor\n\n$$b_k = a_k H(k \\omega_0)$$\n\n### Representing power of a signal\n\nTo get the power of a signal, we can simply use Parseval's relation for periodic signals:\n\n$$\\mathcal{P} = \\frac{1}{T} \\int_{<T>} |x(t)|^2 dt = \\sum_{k= -\\infty}^\\infty |a_k|^2$$\n"},1331:function(n,e,t){"use strict";t.r(e),e.default='---\nheader: Kubernetes\ndescription: Orchestrated container management and deployment.\n---\n\n# Kubernetes (K8s)\n\nKubernetes is a comprehensive system that handles the management and deployment of containerized applications (i.e. [Docker containers]()). It can handle aspects such as clustering, scheduling, load balancing, networking, scaling and even CI/CD. \n\n## Kubernetes Jargon\n\n#### Kubernetes Clusters\n\nA Kubernetes Cluster is the collection of computers or virtual machines that Kubernetes controls such that the cluster can function in unison. \n\nIt consists of:\n\n* [A Master]()\n* [Node(s)]()\n\n#### Master\n\nThe master of a cluster is the central body that manages the cluster.\n\nIt is in charge of:\n* Scheduling\n* Maintaining application states\n* Scaling applications\n* Updating\n\n#### Nodes\n\nNodes work for the master, and they run applications. They are able to communicate with the master through the Kubernetes API.\n\nNodes consist of:\n\n* A Kubelet\n* A container runtime\n* Containerized application(s)\n\n#### Kubernetes Deployment\n\nWhen a cluster gets created, you can begin a deployment for a Pod. A Kubernetes Deployment is a specified configuration telling Kubernetes how to create and update your application instances. It consists of:\n* Replica set configurations\n* Update strategy configurations\n\nScaling is handled through creating replica sets of a pod and increase or decrease instances as needed. Replica sets can also be used for redundancy to avoid downtime.\n\nThe update strategy handles rolling updates.\n\n#### Kubernetes Pods\n\nA Kubernetes Pod is an instance of an application. It consists of at least one container and any associated containers/resources. In addition to including containers, Pods store:\n* Networking information\n* Configurations for the container\n\nOn the other hand, it can isolate container specific resources such as:\n* Processes\n* Filesystems\n* Namespaces\n\nPods are configured through a yaml configuration file.\n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: app-name\n  namespace: app-example\n  labels:\n    app: app\n    ui: ui\n    api: api\nspec:\n  containers:\n  - name: app-container\n    image: user/container-name:latest\n    resources:\n      limits:\n        memory: "200Mi"\n      requests:\n        memory: "100Mi"\n    command: ["stress"]\n    args: ["--vm", "1", "--vm-bytes", "150M", "--vm-hang", "1"]\n```\n\n#### Kubernetes Service\n\nA Kubernetes Service is a configuration that handles the networking portion of nodes. For instance, you can assign proxies, domains, DNS services, internal IP addresses, external IP addresses or ports to a node.\n\n#### CI/CD\n\nKubernetes is also capable of CI/CD. It is intelligent enough to implement "rolling updates" such that your services do not experience downtime if an update is needed. It does this by updating one pod at a time such that one is always available.\n\n#### Namespaces\n\nA namespace contains a project and its workloads while also partitioning it from other projects.\n\n## Additional Terminology\n\n#### ConfigMaps and secrets\n\n#### Persisent Volumes\n\nNetwork storage.\n\n#### Network and Container Network Interface\n\n#### Network Policies\n\n* Firewalls\n\n#### HELM Package Manager\n\n#### RBAC\n\nAuthentication management for Kubernetes.\n\n#### Horizontal Pod Autoscaler\n\nAbility to launch more instances of an application automatically.\n\n#### Daemon Sets\n\nAbility to run  identically on each node like:\n* Logging\n* Monitoring\n\n#### Stateful Sets\n\n* Provisioning\n* Mounting\n* Has a constant identifier\n* Always launches on the same server\n\n#### Cron Jobs\n\n* Scheduled jobs to run.\n\n## Kube Control (kubectl)\n\nTo interface with a Kubernetes instance, download the Kubernetes CLI, aka kubectl.\n\n### Common Commands\n\n#### kubectl\n\n## Minikube\n\nMinikube is a local instance of Kubernetes. It is **not** recommended for production!\n\n## General process for launching your stack into Kubernetes\n\n1. Partition a namespace in Kubernetes for your project or stack. Here you can apply:\n* Quotas or limits to your hardware\n* Create network policies for internet traffic\n\n2. Create a Deployment (or a controller manager).\n\n3. Create a Service. It handles:\n* IP address/port assignments\n* DNS servers\n* Load balancing\n* Proxies/Ingress (e.g. nginx)\n'},1332:function(n,e,t){"use strict";t.r(e),e.default="---\nheader: Korean \ndescription: Language for the layman.\n---\n\n# Alphabet\n\n#### Consonants\n\n| Hangeul | Pronouncation |\n|---------|---------------|\n| ㄱ      | g, k          | \n| ㄲ      | GG, KK        |\n| ㄴ      | n             |\n| ㄷ      | d, t          |\n| ㄸ      | DD, TT        |\n| ㄹ      | r, l          |\n| ㅁ      | m             |\n| ㅂ      | b, p          |\n| ㅃ      | BB, PP        |\n| ㅅ      | s             |\n| ㅆ      | SS            |\n| ㅇ      | null/ng       |\n| ㅈ      | j             |\n| ㅉ      | JJ            |\n| ㅊ      | ch            |\n| ㅋ      | kh            |\n| ㅌ      | th            |\n| ㅍ      | ph            |\n| ㅎ      | h             |"},1333:function(n,e,t){"use strict";t.r(e),e.default="---\nheader: Linear Algebra\ndescription: The study of linear equations.\n---\n\n## Linear Equations\n\nA linear equation can be expressed as\n\n$$y=a_1x_1 + a_2x_2 + a_3x_3 + ... + a_nx_n = b$$\n\nwhere $a_1, a_2, a_3, ... , a_n, b$ are scalar coefficients and $x_1, x_2, x_3, ..., x_n$ are variables.\n\n### Homogenous System of Linear Equations\n\nA homogenous system of linear equations takes the form\n\n$$a_{11}x_1+a_{12}x_2+...+a_{1n}x_n=0\n\\newline\n\\newline \\vdots\n\\newline\na_{m1}x_1+a_{m2}x_2+...+a_{mn}x_n=0$$\n\nThis is system of linear equations is homogenous because the solution to the system has at least one trivial solution, $x_1=x_2= ... =x_n=0$.\n\n#### Theorem of Homogenous Systems\n\nA homogenous system with $n$ variables and $m$ equations has $\\infty$ solutions if $n>m$.\n\n## Augmented Matrix\n\nGiven a system of linear equations\n\n$$a_{11}x_1+a_{12}x_2+...+a_{1n}x_n=b_1\n\\newline\n\\newline \\vdots\n\\newline\na_{m1}x_1+a_{m2}x_2+...+a_{mn}x_n=b_n$$\n\nWe can extract the coefficients transform the system into an augmented matrix:\n\n$$\\left[\n\\begin{array}{cccc:c}\na_{11} & a_{12} & \\dots & a_{1n} & b_1 \\\\ \n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\ \na_{m1} & a_{m2} & \\dots & a_{mn} & b_n \\\\\n\\end{array}\n\\right]$$\n\n## Reduced Row Echelon Form\n\n1. Any rows of zeroes are at the bottom.\n2. The first non-zero entry of a non-zero row is one (1).\n3. Starting from the top left, the leading one (1) appears to the right of the leading one (1) of the preceding row.\n4. All other entries of a column containing a leading one (1) is zero (0).\n\n## Matrices\n\nA matrix is a collection of numbers with a fixed number of rows and columns, of the form:\n\n### Notation\n$$ A =\n\\left[\n\\begin{array}{ccccc}\na_{11} & a_{12} & \\dots & a_{1n} \\\\\na_{21} & a_{22} & \\dots & a_{2n} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\ \na_{m1} & a_{m2} & \\dots & a_{mn} \\\\\n\\end{array}\n\\right]$$\n\nwhere $A$ is an $m \\times n$ matrix and $m$ are the rows and $n$ are the columns.\n\nMore generally,\n\n$$A =\n\\left[\n\\begin{array}{c}\na_{ij} \n\\end{array}\n\\right]$$\n\n$A$ is an $i \\times j$ matrix where $i$ is the number of rows and $j$ is the number of columns.\n\n### Properties\n\n#### Addition\n\nLet\n\n$$A =\n\\left[\n\\begin{array}{c}\na_{ij} \n\\end{array}\n\\right]$$\n\n$$B =\n\\left[\n\\begin{array}{c}\nb_{ij} \n\\end{array}\n\\right]$$\n\nNow,\n\n$$A + B =\n\\left[\n\\begin{array}{c}\na_{ij} + b_{ij}\n\\end{array}\n\\right]$$\n"},1334:function(n,e,t){"use strict";t.r(e),e.default="---\nheader: Microelectronics\ndescription: The study of small eletrical components.\n---\n\n# Brief\nWe'll analyze circuit components such as diodes, amplifiers and MOSFETs.\n\n# Operational Amplifiers (Op amp)\nThe main goal of an operational amplifier is to amplify a voltage. It has three terminals, two inputs and one output, as seen in the figure:\n\n![opamp](/microelectronics/opamp.svg)\n\nAn op amp is operated by DC power supplies with one rail connected to postive voltage and the other connected to negative voltage.\n\n## Ideal Operation Amplifier Model\n\nWe can assume four characteristics of an ideal op amp:\n\n1. $i_{input} = 0 \\implies R_i \\rightarrow \\infty$. No current flows into the input terminals, thus the input impedence is infinite.\n2. $v_o = A(v_2-v_1) \\implies R_o \\rightarrow 0$. The output terminal acts like an ideal voltage source, where $v_o = A(v_2-v_1)$, so the output impedance is zero.\n3. Bandwidth $\\rightarrow \\infty$. In other words, the op amp can amplify signals at any frequency with equal gain.\n4. Infinite Open Loop Gain. $A \\rightarrow \\infty$.\n4. Infinite Common Mode Rejection, so $v_1=v_2$ assuming the differential gain $A \\rightarrow \\infty$.\n    * $\\displaystyle \\lim_{A \\rightarrow \\infty} \\frac{v_o}{A} = v_2 - v_1 \\implies v_1 = v_2$.\n    * Common mode rejection is the amplifier's ability to rid of the common mode voltage. In other words, if an ideal op amp removed all of the common mode voltage, then say $v_1=v_2=1v$. \n    \n    $$v_o = A(v_2-v_1) = A(1 - 1) = 0$$\n\n### Differential & Common Mode Signals\n\n#### Differential Input\n- The difference between the input signals $v_1$ and $v_2$.\n\n$$v_{Id} = v_2 - v_1$$\n\n#### Common Mode Input\n- The average of the input signals $v_1$ and $v_2$.\n\n$$v_{Icm}=\\frac{1}{2} (v_1+v_2)$$\n\n### Closed Loop Gain\n\n$$G \\equiv \\frac{v_O}{v_I}$$\n\n# MOSFETs\nA MOSFET is a metal oxide semiconduter (MOS) field effect transistor (FET). It is a two terminal semiconductor device that is often utilized in integrated circuits. \n\n## N-channel MOS\nThe N-channel MOS is one that has a heavily doped n-channel regions in the source and drain regions. It has the drain, source, gate and body.\n\n### NMOS Dependencies\n\n#### Gate Voltage $V_G$\n\n#### Drain Voltage $V_D$\n\n#### Source Voltage $V_S$\n\n#### Gate to Source Voltage\n- The potential difference between the gate and source.\n\n$$V_{GS} = V_G - V_S$$\n\n#### Drain to Source Voltage\n- The potential difference between the drain and source.\n\n$$V_{DS} = V_D - V_S$$\n\n#### Threshold Voltage $V_t$\n\n- The minimum voltage required to form a conducting channel between the source and drain terminals.\n- A manufacturing dependent value.\n\n#### Effective / Overdrive Voltage\n\n- The excess $V_{GS}$ over $V_t$.\n- Determines charge of the conducting channel.\n\n$$V_{OV} \\equiv V_{GS} - V_t$$\n\n#### Channel Width $W$\n\n#### Channel Length $L$\n\n#### Permittivity of Silicon Dioxide\n\n$$\\epsilon_{ox} = 3.9 \\epsilon_0 = 3.9 \\times 8.854 \\times 10^{-12} = 3.45 \\times 10^{-11} \\frac{F}{M}$$\n\n#### Oxide Thickness $t_o\\phantom{}_x$\n\n- A manufacturing dependent value.\n\n#### Oxide Capacitance\n\n- The capacitance of the parallel plate capacitor per unit gate area.\n\n$$C_{ox} = \\frac{\\epsilon_{ox}}{t_{ox}}$$\n\n#### Electron Charge Magnitude\n\n$$|Q| = C_{ox}(WL)V_{OV}$$\n\n#### Gate to Channel Capacitance\n\n$$C=C_{ox}WL$$\n\n#### Electron Mobility $\\mu_n$\n\n#### Process Transc onductance\n\n$$k^{'}_{n} = \\mu_n C_{ox}$$\n\n#### MOSFET Transconductance Parameter\n\n$$k_n = k^{'}_{n} (\\frac{W}{L}) = \\mu_n C_{ox} (\\frac{W}{L})$$\n\n#### MOSFET Resistance\n\n$$r_{DS}=\\frac{1}{g_{DS}} = \\frac{1}{\\mu_n C_{ox} (\\frac{W}{L})V_{OV}}$$\n\n### NMOS Regions of Operation\n\n#### Cutoff\n\n- As long as the following conditions are satisfied, the MOSFET is in cutoff:\n\n$$V_{GS} < V_{tn}$$\n\n- If the MOSFET is in cutoff, the drain current is zero ($i_D=0$).\n- In this state, the channel is pitched so no current can flow.\n\n#### Triode\n- As long as the following conditions are satisfied, the MOSFET is in triode:\n\n$$V_{GS} > V_{tn}$$\n$$V_{GD} > V_t \\text{ or } V_{DS} < V_{OV}$$\n\n- The drain current when in triode is:\n\n$$i_D= k'_n \\frac{W}{L} [(V_{GS}-V_{tn})V_{DS}-\\frac{1}{2} V_{DS}^2]$$\n\n#### Saturation\n\n- As long as the following conditions are satisfied, the MOSFET is in triode:\n\n$$V_{GS} > V_{tn}$$\n$$V_{GD} \\leq V_{tn} \\text{ or } V_{DS} \\geq V_{OV}$$\n\n- The drain current when in triode is:\n\n$$i_D= k'_n \\frac{W}{L} (V_{GS}-V_{tn})^2$$\n"},1335:function(n,e,t){var content=t(1342);"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,t(86).default)("4107aba9",content,!0,{sourceMap:!1})},1340:function(n,e,t){var map={"./calculus.md":1326,"./cmake.md":1327,"./docker.md":1328,"./ee.md":1329,"./fourier.md":1330,"./k8s.md":1331,"./kr.md":1332,"./linear.md":1333,"./microelectronics.md":1334};function o(n){var e=r(n);return t(e)}function r(n){if(!t.o(map,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return map[n]}o.keys=function(){return Object.keys(map)},o.resolve=r,n.exports=o,o.id=1340},1341:function(n,e,t){"use strict";var o=t(1335);t.n(o).a},1342:function(n,e,t){(n.exports=t(85)(!1)).push([n.i,".clickable {\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, .16);\n}\n",""])},1418:function(n,e,t){"use strict";t.r(e);t(549),t(66),t(44);var o={components:{Header:t(1325).a},data:function(){return{topics:[]}},methods:{importAll:function(n){var e=this;n.keys().forEach(function(n){e.topics.push(n.match(/\/(.*?)\./)[1])})}},mounted:function(){this.importAll(t(1340))}},r=(t(1341),t(65)),component=Object(r.a)(o,function(){var n=this.$createElement,e=this._self._c||n;return e("div",[e("Header",{attrs:{header:"Guides",description:"Quick notes of various academic topics."}}),this._v(" "),e("div",{staticClass:"flex p-4 flex-wrap"},this._l(this.topics,function(n){return e("nuxt-link",{key:n,staticClass:"flex-1 p-2",attrs:{to:"/guides/"+n}},[e("a-card",{attrs:{hoverable:"",title:n.toUpperCase()}})],1)}),1)],1)},[],!1,null,null,null);e.default=component.exports}}]);